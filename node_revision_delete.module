<?php

/**
 * @file
 * Contains node_revision_delete.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function node_revision_delete_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help.
    case 'help.page.node_revision_delete':

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Node Revision Delete module allows you to manage the revisions of the Node according to your choice. It helps you to keep the specific number of revisions for the node. This module provides you the flexibility for applying the revision delete for the specific content type and run it on the specific time.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring the module') . '</dt>';
      $output .= '<dd>' . t('You can manage the module settings from the <a href=":config-page">Node Revision Delete</a> page. For this you need the <em>Administer Node Revision Delete</em> permission.', [':config-page' => Url::fromRoute('node_revision_delete.admin_settings')->toString()]) . '</dd>';
      $output .= '</dl>';

      return $output;

    case 'node_revision_delete.admin_settings':
      $output = '';
      $output .= '<p>' . t("To allow Node Revision Delete to act upon a certain content type, you should navigate to the desired content type's edit page via:") . '</p>';
      $output .= '<p><em>' . t('Administration » Structure » Content types » [Content type name]') . '</em></p>';
      $output .= '<p>' . t("Under the Publishing Options tab, enable 'Create new revision' and 'Limit the amount of revisions for this content type' checkboxes. Change the Maximum number of revisions to keep, if you need to, and finally, save your changes clicking in the Save content type button.") . '</p>';

      return $output;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function node_revision_delete_preprocess_page(&$variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  switch ($route_name) {
    // Adding a css file to the Node Revision Delete Administration Page.
    case 'node_revision_delete.admin_settings':
      $variables['#attached']['library'][] = 'node_revision_delete/admin_settings';
      break;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function node_revision_delete_form_node_type_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Getting the config.
  $config = \Drupal::config('node_revision_delete.settings');
  // Getting the content types to track variable.
  $node_revision_delete_track = $config->get('node_revision_delete_track');
  // Getting the content type machine name from the actual form.
  $content_type = $form_state->getFormObject()->getEntity()->id();
  // Looking if the config exists for the content type.
  if (isset($node_revision_delete_track[$content_type])) {
    $track = TRUE;
    $minimum_revisions_to_keep = $node_revision_delete_track[$content_type]['minimum_revisions_to_keep'];
    $when_to_delete = $node_revision_delete_track[$content_type]['when_to_delete'];
    $minimum_age_to_delete = $node_revision_delete_track[$content_type]['minimum_age_to_delete'];
  }
  else {
    $track = FALSE;
    $minimum_revisions_to_keep = 1;
    $when_to_delete = 0;
    $minimum_age_to_delete = 0;
  }

  $form['workflow']['section'] = [
    '#type' => 'fieldset',
    '#title' => t("Node revision delete"),
    '#attributes' => ['class' => ['fieldgroup', 'form-composite']],
  ];
  // Element to track the content type.
  $form['workflow']['section']['node_revision_delete_track'] = [
    '#type' => 'checkbox',
    '#title' => t('Limit the amount of revisions for this content type'),
    '#default_value' => $track,
    '#attached' => [
      'library' => [
        'node_revision_delete/content_types',
        'node_revision_delete/admin_settings',
      ],
    ],
  ];
  // Element for the minimum number of revisions to keep.
  $form['workflow']['section']['minimum_revisions_to_keep'] = [
    '#type' => 'number',
    '#title' => t('Minimum number of revisions to keep'),
    '#description' => t('Oldest revisions will be deleted when the total amount surpases this value. Set it to 1 to remove all revisions.'),
    '#default_value' => $minimum_revisions_to_keep,
    '#min' => 1,
    '#states' => [
      // Hide the settings when the cancel notify checkbox is disabled.
      'visible' => [
        ':input[name="node_revision_delete_track"]' => ['checked' => TRUE],
      ],
    ],
  ];
  // Getting the max number for node_revision_delete_minimum_age_to_delete_time.
  $node_revision_delete_minimum_age_to_delete_time_max_number = $config->get('node_revision_delete_minimum_age_to_delete_time')['max_number'];
  // Available options for minimum_age_to_delete.
  $options_minimum_age_to_delete[0] = t('None');
  for ($i = 1; $i <= $node_revision_delete_minimum_age_to_delete_time_max_number; $i++) {
    $options_minimum_age_to_delete[$i] = _node_revision_delete_time_string('minimum_age_to_delete', $i);
  }
  // Element to know when to delete the revisions.
  $form['workflow']['section']['minimum_age_to_delete'] = [
    '#type' => 'select',
    '#title' => t('Minimum age of revisions to delete'),
    '#description' => t('Revisions older of this age will be deleted, but just only after the "Minimum number of revisions to keep" will be reached. If you don\'t want to take in count the age of the revisions, set to "None".'),
    '#options' => $options_minimum_age_to_delete,
    '#size' => 1,
    '#default_value' => $minimum_age_to_delete,
    '#states' => [
      // Show the field when the checkbox is checked.
      'visible' => [
        ':input[name="node_revision_delete_track"]' => ['checked' => TRUE],
      ],
    ],
  ];
  // Getting the max number for node_revision_delete_when_to_delete_time.
  $node_revision_delete_when_to_delete_time_max_number = $config->get('node_revision_delete_when_to_delete_time')['max_number'];
  // Available options for when_to_delete variable.
  $options_when_to_delete[0] = t('Always');
  for ($i = 1; $i <= $node_revision_delete_when_to_delete_time_max_number; $i++) {
    // Creating the time string.
    $options_when_to_delete[$i] = _node_revision_delete_time_string('when_to_delete', $i);
  }
  // Element to know when to delete the revisions.
  $form['workflow']['section']['when_to_delete'] = [
    '#type' => 'select',
    '#title' => t('When to delete'),
    '#description' => t('If the current revision is not older than specified here, its older revisions will not be deleted, even if they are old enough. If set to "Always", older revisions will be deleted regardless of the age of the current revision.'),
    '#options' => $options_when_to_delete,
    '#size' => 1,
    '#default_value' => $when_to_delete,
    '#states' => [
      // Show the field when the checkbox is checked.
      'visible' => [
        ':input[name="node_revision_delete_track"]' => ['checked' => TRUE],
      ],
    ],
  ];

  // If we are creating the content type. Putting the custom submit handler
  // first to use the Entity->isNew() function, if the custom submit handler is
  // the last function called always the Entity is created first.
  if (isset($form['actions']['save_continue']['#submit'])) {
    array_unshift($form['actions']['save_continue']['#submit'], '_node_revision_delete_form_node_type_submit');
  }
  // If we are editing the content type. Putting the custom submit handler
  // first to use the Entity->isNew() function, if the custom submit handler is
  // the last function called always the Entity is created first.
  array_unshift($form['actions']['submit']['#submit'], '_node_revision_delete_form_node_type_submit');
}

/**
 * Custom submit handler to save the configuration variables.
 *
 * @param array $form
 *   The form element.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _node_revision_delete_form_node_type_submit(array &$form, FormStateInterface $form_state) {
  // Getting the form values.
  $track = $form_state->getValue('node_revision_delete_track');
  // Getting the content type machine name.
  $content_type = $form_state->getFormObject()->getEntity()->id();
  // If we will track the content type.
  if ($track) {
    // Getting the form values.
    $minimum_revisions_to_keep = $form_state->getValue('minimum_revisions_to_keep');
    $minimum_age_to_delete = $form_state->getValue('minimum_age_to_delete');
    $when_to_delete = $form_state->getValue('when_to_delete');
    // Saving the values in the config.
    _node_revision_delete_save_content_type_config($content_type, $minimum_revisions_to_keep, $minimum_age_to_delete, $when_to_delete);
  }
  // If we are not tranking the content type and it exists (is not new)
  // we need to delete the existing config.
  elseif (!$form_state->getFormObject()->getEntity()->isNew()) {
    // Deleting the value from the config.
    _node_revision_delete_delete_content_type_config($content_type);
  }
}

/**
 * Save the content type config variable.
 *
 * @param string $content_type
 *   Content type machine name.
 * @param int $minimum_revisions_to_keep
 *   Minimum number of revisions to keep.
 * @param int $minimum_age_to_delete
 *   Minimum age in months of revision to delete.
 * @param int $when_to_delete
 *   Number of inactivity months to wait for delete a revision.
 */
function _node_revision_delete_save_content_type_config($content_type, $minimum_revisions_to_keep, $minimum_age_to_delete, $when_to_delete) {
  // Getting the config file.
  $config = \Drupal::service('config.factory')->getEditable('node_revision_delete.settings');
  // Getting the variables with the content types configuration.
  $node_revision_delete_track = $config->get('node_revision_delete_track');
  // Creating the content type info.
  $content_type_info = [
    'minimum_revisions_to_keep' => $minimum_revisions_to_keep,
    'minimum_age_to_delete' => $minimum_age_to_delete,
    'when_to_delete' => $when_to_delete,
  ];
  // Adding the info into te array.
  $node_revision_delete_track[$content_type] = $content_type_info;
  // Saving the values in the config.
  $config->set('node_revision_delete_track', $node_revision_delete_track)->save();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function node_revision_delete_form_node_type_delete_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // If we are deleting a content type.
  $form['actions']['submit']['#submit'][] = '_node_revision_delete_form_node_type_delete';
}

/**
 * Custom submit handler to delete the configuration variables.
 *
 * @param array $form
 *   The form element.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function _node_revision_delete_form_node_type_delete(array &$form, FormStateInterface $form_state) {
  // Getting the content type machine name.
  $content_type = $form_state->getFormObject()->getEntity()->id();
  // Deleting the value from the config.
  _node_revision_delete_delete_content_type_config($content_type);
}

/**
 * Delete the content type config variable.
 *
 * @param string $content_type
 *   Content type machine name.
 *
 * @return bool
 *   Return TRUE if the content type config was deleted or FALSE if not exists.
 */
function _node_revision_delete_delete_content_type_config($content_type) {
  // Getting the config file.
  $config = \Drupal::service('config.factory')->getEditable('node_revision_delete.settings');
  // Getting the variables with the content types configuration.
  $node_revision_delete_track = $config->get('node_revision_delete_track');
  // Checking if the config exists.
  if (isset($node_revision_delete_track[$content_type])) {
    // Deleting the value from the array.
    unset($node_revision_delete_track[$content_type]);
    // Saving the values in the config.
    $config->set('node_revision_delete_track', $node_revision_delete_track)->save();
    return TRUE;
  }
  return FALSE;
}

/**
 * Return the list of candidate nodes for node revision delete.
 *
 * @param string $content_type
 *   Content type machine name.
 * @param int $minimum_revisions_to_keep
 *   Minimum number of revisions to keep.
 * @param int $minimum_age_to_delete
 *   Minimum age in months of revision to delete.
 * @param int $when_to_delete
 *   Number of inactivity months to wait for delete a revision.
 *
 * @return array
 *   Array of nids.
 */
function _node_revision_delete_candidates($content_type, $minimum_revisions_to_keep, $minimum_age_to_delete, $when_to_delete) {
  $connection = \Drupal::service('database');
  // Array with sustitution values.
  $array = [
    ':content_type' => $content_type,
    ':revisions_to_keep' => $minimum_revisions_to_keep,
  ];

  if (!$minimum_age_to_delete && !$when_to_delete) {
    $result = $connection->query('SELECT n.nid, count(n.nid) as total
                     FROM node n
                     INNER JOIN node_revision r ON r.nid = n.nid
                     WHERE n.type = :content_type
                     GROUP BY n.nid
                     HAVING count(n.nid) > :revisions_to_keep', $array);

    return $result->fetchCol();
  }
}

/**
 * Implements hook_library_info_alter().
 */
function node_revision_delete_library_info_alter(&$libraries, $extension) {
  // Deleting the library because we have our own version.
  // Maybe this cannot be longer needed once https://www.drupal.org/node/2871619
  // will be fixed.
  if ($extension == 'node' && isset($libraries['drupal.content_types'])) {
    unset($libraries['drupal.content_types']);
  }
}

/**
 * Return the time string for the config_name parameter.
 *
 * @param string $config_name
 *   The config name.
 * @param int $number
 *   The number for the $config_name parameter configuration.
 *
 * @return string
 *   The time string for the $config_name parameter.
 */
function _node_revision_delete_time_string($config_name, $number) {
  // Geting the config.
  $config = \Drupal::config('node_revision_delete.settings');
  $config_name_time = $config->get('node_revision_delete_' . $config_name . '_time');
  // Is singular or plural?
  $time = _node_revision_delete_time_number_string($number, $config_name_time['time']);
  // Return the time string for the $config_name parameter.
  switch ($config_name) {
    case 'minimum_age_to_delete':
      return $number . ' ' . $time;

    case 'when_to_delete':
      return t('After @number @time of inactivity', ['@number' => $number, '@time' => $time]);
  }
}

/**
 * Update the max_number for a config name.
 *
 * We need to update the max_number in the existing content type configuration
 * if the new value (max_number) is lower than the actual, in this case the new
 * value will be the value for the content type.
 *
 * @param string $config_name
 *   Config name to update (when_to_delete or minimum_age_to_delete).
 * @param int $max_number
 *   The maximum number for $config_name parameter.
 */
function _node_revision_delete_update_time_max_number_config($config_name, $max_number) {
  // Getting the config file.
  $config = \Drupal::service('config.factory')->getEditable('node_revision_delete.settings');
  // Getting the variables with the content types configuration.
  $node_revision_delete_track = $config->get('node_revision_delete_track');
  $changed = FALSE;
  // Checking the when_to_delete value for all the configured content types.
  foreach ($node_revision_delete_track as $content_type => $content_type_info) {
    // If the new defined max_number is smaller than the defined when_to_delete
    // value in the config, we need to change the stored config value.
    if ($max_number < $content_type_info[$config_name]) {
      $node_revision_delete_track[$content_type][$config_name] = $max_number;
      $changed = TRUE;
    }
  }
  // Saving only if we have changes.
  if ($changed) {
    // Saving the values in the config.
    $config->set('node_revision_delete_track', $node_revision_delete_track)->save();
  }
}

/**
 * Return the available values for time frequency.
 *
 * @param string $index
 *   The index to retrieve.
 *
 * @return string
 *   The index value (human readable value).
 */
function _node_revision_delete_time_value($index = NULL) {
  $options_node_revision_delete_time = [
    'never' => t('Never'),
    'every_time' => t('Every time cron runs'),
    'everyday' => t('Everyday'),
    'every_week' => t('Every Week'),
    'every_10_days' => t('Every 10 Days'),
    'every_15_days' => t('Every 15 Days'),
    'every_month' => t('Every Month'),
    'every_3_months' => t('Every 3 Months'),
    'every_6_months' => t('Every 6 Months'),
    'every_year' => t('Every Year'),
    'every_2_years' => t('Every 2 Years'),
  ];

  if (isset($index) && isset($options_node_revision_delete_time[$index])) {
    return $options_node_revision_delete_time[$index];
  }
  else {
    return $options_node_revision_delete_time;
  }
}

/**
 * Return the time option in singular or plural.
 *
 * @param string $number
 *   The number.
 * @param string $time
 *   The time option (days, weeks or months).
 *
 * @return string
 *   The singular or plural value for the time.
 */
function _node_revision_delete_time_number_string($number, $time) {
  // Time options.
  $time_options = [
    'days' => [
      'singular' => t('day'),
      'plural' => t('days'),
    ],
    'weeks' => [
      'singular' => t('week'),
      'plural' => t('weeks'),
    ],
    'months' => [
      'singular' => t('month'),
      'plural' => t('months'),
    ],
  ];

  return $number == 1 ? $time_options[$time]['singular'] : $time_options[$time]['plural'];
}
